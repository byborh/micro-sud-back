corriger le générateur d'id ! - OK

générer que des id tout collé ! - OK

générer qu'au moment de la création de l'user ! - OK

ça génère automatiquement au moment de lancement du serveur, il faut enlever ce petit détail - OK

créer les endpoints dans le controller - OK

à réfléchier si je dois créer un dossier modules dans src et de stocker tous les modules de dans :  - OK

├── core/
│   ├── idGenerator.ts
│   └── ...
├── middlewares/
│   ├── validateParamMiddleware.ts
│   └── ...
├── modules/
│   ├── users/
│   └── ...
- OK

il faut transférer tous les "req.body" à une entité dans le controller - OK

on peut créer le même user à l'infinie, à modifier !! - OK

il faut vérifier son mail, s'il est existant, alors, on le publie pas - OK

je peux pas vérifier les endpoints : "put" et "delete" car, il ne peut modifier ce qui n'existe pas dans la fausse bdd (normal, car c'est statique)

créer un repository avec une vraie bdd (du genre : sql) ! - OK

modifier le générateur d'id pour qu'il prenne en paramètre un nombre de longueur à générer pour l'id - OK

Le mot de passe ne se stocke pas dans la bdd, pq ?? - OK

tester si la bdd MySQL fonctionne correctement - OK

créer un fichier pour le chiffrement/hashage des mdp - OK

mettre une limite minimum de 8 charachteres pour les mot de passe - OK

Faire la base des tests unitaires - OK

recréer la méthode modifyUser. elle est pourrie - OK

ça supprime le mdp si la requête n'a pas de mdp. ça ne doit pas le supprimer - OK

------------------------------------------------------------------------------------------------------------------------------------------

Supprimer TOUS. et de remettre le TypeORM !









concevoir une abstraction générique pour les endpoints

faire passer tous mon code par chatgpt pour corriger les erreurs et d'éviter des failles de sécurité

faire des logs plus parlant

l'endpoint getAllUsers ne fonctionne pas correctement. ça get que le premier élément

ne pas oublier de retourner le mdp aussi pour toutes les requêtes get

créer des exceptions si nécessaire

créer des logs pour chaque C_UD des utilisateurs

créer des tokens pour l'autorisation des utilisateurs / gérer les droits

utiliser une bibliothèque dédiée comme winston ou pino pour une gestion efficace des logs

Corriger les tests unitaires

les imports de ce genre ne fonctionne pas dans les fichier .test.ts :
import { UserController } from "@modules/users/controllers/UserController";

créer la bdd mongodb et vérifier si elle fonctionne correctement

créer la bdd redis et vérifier si elle fonctionne correctement

stocker les requêtes SQL dans un fichier séparé (peut être : json) et de faire appel à ce fichier quand on en a besoin. comme ça, les gens n'ont qu'à modifier le fichier

faire pareil avec des requêtes mongodb

faire pareil avec des requêtes redis

Sécuriser les endpoints avec plus de couches

créer des scripts !!! pour faciliter la tâche

------------------------------------------------------------------------------------------------------------------------------------------

exemple d'utilisateurs :

{
  "id": "12345",
  "firstname": "Alice",
  "lastname": "Wonderland",
  "pseudo": "aliceW",
  "email": "alice@example.com",
  "password": "securePassword123",
  "telnumber": "555-1234"
}

{
  "id": "67890",
  "firstname": "Bob",
  "lastname": "Builder",
  "pseudo": "bobTheBuilder",
  "email": "bob@example.com",
  "password": "fixIt456",
  "telnumber": "555-5678"
}
  